{"ast":null,"code":"import React, { useContext } from \"react\";\nimport { initializeApp, getApps } from \"firebase/app\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { useTheme, themeColor } from \"react-native-rapi-ui\";\nimport TabBarIcon from \"../components/utils/TabBarIcon\";\nimport TabBarText from \"../components/utils/TabBarText\";\nimport Home from \"../screens/Home\";\nimport SecondScreen from \"../screens/SecondScreen\";\nimport About from \"../screens/About\";\nimport Profile from \"../screens/Profile\";\nimport Loading from \"../screens/utils/Loading\";\nimport Login from \"../screens/auth/Login\";\nimport Register from \"../screens/auth/Register\";\nimport ForgetPassword from \"../screens/auth/ForgetPassword\";\nimport { AuthContext } from \"../provider/AuthProvider\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar firebaseConfig = {\n  apiKey: \"\",\n  authDomain: \"\",\n  databaseURL: \"\",\n  projectId: \"\",\n  storageBucket: \"\",\n  messagingSenderId: \"\",\n  appId: \"\"\n};\n\nif (getApps().length === 0) {\n  initializeApp(firebaseConfig);\n}\n\nvar AuthStack = createNativeStackNavigator();\n\nvar Auth = function Auth() {\n  return _jsxs(AuthStack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    children: [_jsx(AuthStack.Screen, {\n      name: \"Login\",\n      component: Login\n    }), _jsx(AuthStack.Screen, {\n      name: \"Register\",\n      component: Register\n    }), _jsx(AuthStack.Screen, {\n      name: \"ForgetPassword\",\n      component: ForgetPassword\n    })]\n  });\n};\n\nvar MainStack = createNativeStackNavigator();\n\nvar Main = function Main() {\n  return _jsxs(MainStack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    children: [_jsx(MainStack.Screen, {\n      name: \"MainTabs\",\n      component: MainTabs\n    }), _jsx(MainStack.Screen, {\n      name: \"SecondScreen\",\n      component: SecondScreen\n    })]\n  });\n};\n\nvar Tabs = createBottomTabNavigator();\n\nvar MainTabs = function MainTabs() {\n  var _useTheme = useTheme(),\n      isDarkmode = _useTheme.isDarkmode;\n\n  return _jsxs(Tabs.Navigator, {\n    screenOptions: {\n      headerShown: false,\n      tabBarStyle: {\n        borderTopColor: isDarkmode ? themeColor.dark100 : \"#c0c0c0\",\n        backgroundColor: isDarkmode ? themeColor.dark200 : \"#ffffff\"\n      }\n    },\n    children: [_jsx(Tabs.Screen, {\n      name: \"Home\",\n      component: Home,\n      options: {\n        tabBarLabel: function tabBarLabel(_ref) {\n          var focused = _ref.focused;\n          return _jsx(TabBarText, {\n            focused: focused,\n            title: \"Home\"\n          });\n        },\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var focused = _ref2.focused;\n          return _jsx(TabBarIcon, {\n            focused: focused,\n            icon: \"md-home\"\n          });\n        }\n      }\n    }), _jsx(Tabs.Screen, {\n      name: \"Profile\",\n      component: Profile,\n      options: {\n        tabBarLabel: function tabBarLabel(_ref3) {\n          var focused = _ref3.focused;\n          return _jsx(TabBarText, {\n            focused: focused,\n            title: \"Profile\"\n          });\n        },\n        tabBarIcon: function tabBarIcon(_ref4) {\n          var focused = _ref4.focused;\n          return _jsx(TabBarIcon, {\n            focused: focused,\n            icon: \"person\"\n          });\n        }\n      }\n    }), _jsx(Tabs.Screen, {\n      name: \"About\",\n      component: About,\n      options: {\n        tabBarLabel: function tabBarLabel(_ref5) {\n          var focused = _ref5.focused;\n          return _jsx(TabBarText, {\n            focused: focused,\n            title: \"About\"\n          });\n        },\n        tabBarIcon: function tabBarIcon(_ref6) {\n          var focused = _ref6.focused;\n          return _jsx(TabBarIcon, {\n            focused: focused,\n            icon: \"ios-information-circle\"\n          });\n        }\n      }\n    })]\n  });\n};\n\nexport default (function () {\n  var auth = useContext(AuthContext);\n  var user = auth.user;\n  return _jsxs(NavigationContainer, {\n    children: [user == null && _jsx(Loading, {}), user == false && _jsx(Auth, {}), user == true && _jsx(Main, {})]\n  });\n});","map":{"version":3,"names":["React","useContext","initializeApp","getApps","NavigationContainer","createNativeStackNavigator","createBottomTabNavigator","useTheme","themeColor","TabBarIcon","TabBarText","Home","SecondScreen","About","Profile","Loading","Login","Register","ForgetPassword","AuthContext","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","length","AuthStack","Auth","headerShown","MainStack","Main","MainTabs","Tabs","isDarkmode","tabBarStyle","borderTopColor","dark100","backgroundColor","dark200","tabBarLabel","focused","tabBarIcon","auth","user"],"sources":["C:/Projects/WhiteHat Jr/template-with-bottom-tabs-auth-flow/navigation/AppNavigator.js"],"sourcesContent":["import React, { useContext } from \"react\";\nimport { initializeApp, getApps } from \"firebase/app\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\n\nimport { useTheme, themeColor } from \"react-native-rapi-ui\";\nimport TabBarIcon from \"../components/utils/TabBarIcon\";\nimport TabBarText from \"../components/utils/TabBarText\";\n//Screens\nimport Home from \"../screens/Home\";\nimport SecondScreen from \"../screens/SecondScreen\";\nimport About from \"../screens/About\";\nimport Profile from \"../screens/Profile\";\nimport Loading from \"../screens/utils/Loading\";\n// Auth screens\nimport Login from \"../screens/auth/Login\";\nimport Register from \"../screens/auth/Register\";\nimport ForgetPassword from \"../screens/auth/ForgetPassword\";\nimport { AuthContext } from \"../provider/AuthProvider\";\n\n// Better put your these secret keys in .env file\nconst firebaseConfig = {\n  apiKey: \"\",\n  authDomain: \"\",\n  databaseURL: \"\",\n  projectId: \"\",\n  storageBucket: \"\",\n  messagingSenderId: \"\",\n  appId: \"\",\n};\n\nif (getApps().length === 0) {\n  initializeApp(firebaseConfig);\n}\n\nconst AuthStack = createNativeStackNavigator();\nconst Auth = () => {\n  return (\n    <AuthStack.Navigator\n      screenOptions={{\n        headerShown: false,\n      }}\n    >\n      <AuthStack.Screen name=\"Login\" component={Login} />\n      <AuthStack.Screen name=\"Register\" component={Register} />\n      <AuthStack.Screen name=\"ForgetPassword\" component={ForgetPassword} />\n    </AuthStack.Navigator>\n  );\n};\n\nconst MainStack = createNativeStackNavigator();\nconst Main = () => {\n  return (\n    <MainStack.Navigator\n      screenOptions={{\n        headerShown: false,\n      }}\n    >\n      <MainStack.Screen name=\"MainTabs\" component={MainTabs} />\n      <MainStack.Screen name=\"SecondScreen\" component={SecondScreen} />\n    </MainStack.Navigator>\n  );\n};\n\nconst Tabs = createBottomTabNavigator();\nconst MainTabs = () => {\n  const { isDarkmode } = useTheme();\n  return (\n    <Tabs.Navigator\n      screenOptions={{\n        headerShown: false,\n        tabBarStyle: {\n          borderTopColor: isDarkmode ? themeColor.dark100 : \"#c0c0c0\",\n          backgroundColor: isDarkmode ? themeColor.dark200 : \"#ffffff\",\n        },\n      }}\n    >\n      {/* these icons using Ionicons */}\n      <Tabs.Screen\n        name=\"Home\"\n        component={Home}\n        options={{\n          tabBarLabel: ({ focused }) => (\n            <TabBarText focused={focused} title=\"Home\" />\n          ),\n          tabBarIcon: ({ focused }) => (\n            <TabBarIcon focused={focused} icon={\"md-home\"} />\n          ),\n        }}\n      />\n      <Tabs.Screen\n        name=\"Profile\"\n        component={Profile}\n        options={{\n          tabBarLabel: ({ focused }) => (\n            <TabBarText focused={focused} title=\"Profile\" />\n          ),\n          tabBarIcon: ({ focused }) => (\n            <TabBarIcon focused={focused} icon={\"person\"} />\n          ),\n        }}\n      />\n      <Tabs.Screen\n        name=\"About\"\n        component={About}\n        options={{\n          tabBarLabel: ({ focused }) => (\n            <TabBarText focused={focused} title=\"About\" />\n          ),\n          tabBarIcon: ({ focused }) => (\n            <TabBarIcon focused={focused} icon={\"ios-information-circle\"} />\n          ),\n        }}\n      />\n    </Tabs.Navigator>\n  );\n};\n\nexport default () => {\n  const auth = useContext(AuthContext);\n  const user = auth.user;\n  return (\n    <NavigationContainer>\n      {user == null && <Loading />}\n      {user == false && <Auth />}\n      {user == true && <Main />}\n    </NavigationContainer>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}