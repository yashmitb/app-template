{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport { component, themeColor } from \"../constants/colors\";\nimport useCachedResources from \"../hooks/useCachedResources\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ThemeContext = React.createContext({\n  theme: \"light\",\n  setTheme: function setTheme(theme) {\n    return console.warn(\"no theme provider\");\n  }\n});\n\nvar useTheme = function useTheme() {\n  return React.useContext(ThemeContext);\n};\n\nvar ThemeProvider = function ThemeProvider(props) {\n  var _React$useState = React.useState(props.theme || \"light\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      theme = _React$useState2[0],\n      setTheme = _React$useState2[1];\n\n  var isLoadingComplete = useCachedResources(props.images, props.fonts);\n  var isDarkmode = theme === \"dark\";\n  return _jsxs(ThemeContext.Provider, {\n    value: {\n      theme: theme,\n      isDarkmode: isDarkmode,\n      setTheme: setTheme\n    },\n    children: [_jsx(StatusBar, {\n      backgroundColor: component[theme].statusBar.color,\n      barStyle: isDarkmode ? \"light-content\" : \"dark-content\"\n    }), _jsx(SafeAreaProvider, {\n      style: {\n        backgroundColor: isDarkmode ? themeColor.dark : themeColor.white100\n      },\n      children: !isLoadingComplete ? props.loading ? props.loading : null : props.children\n    })]\n  });\n};\n\nexport { ThemeProvider, ThemeContext, useTheme };","map":{"version":3,"names":["React","SafeAreaProvider","component","themeColor","useCachedResources","ThemeContext","createContext","theme","setTheme","console","warn","useTheme","useContext","ThemeProvider","props","useState","isLoadingComplete","images","fonts","isDarkmode","statusBar","color","backgroundColor","dark","white100","loading","children"],"sources":["C:/Projects/WhiteHat Jr/template-with-bottom-tabs-auth-flow/node_modules/react-native-rapi-ui/provider/ThemeProvider.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { StatusBar } from \"react-native\";\r\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\r\nimport { component, themeColor } from \"../constants/colors\";\r\nimport useCachedResources from \"../hooks/useCachedResources\";\r\n\r\ntype ContextProps = {\r\n  theme: \"light\" | \"dark\";\r\n  setTheme: (theme: \"light\" | \"dark\") => void;\r\n  isDarkmode?: boolean;\r\n  images?: Array<any> | null;\r\n  fonts?: any;\r\n};\r\n\r\nconst ThemeContext = React.createContext<ContextProps>({\r\n  theme: \"light\",\r\n  setTheme: (theme) => console.warn(\"no theme provider\"),\r\n});\r\n\r\nconst useTheme = () => React.useContext(ThemeContext);\r\n\r\nconst ThemeProvider = (props: {\r\n  theme?: \"light\" | \"dark\";\r\n  isDarkmode?: boolean;\r\n  images?: Array<any> | null;\r\n  fonts?: any;\r\n  children?: React.ReactNode;\r\n  loading?: React.ReactNode;\r\n}) => {\r\n  const [theme, setTheme] = React.useState<\"light\" | \"dark\">(\r\n    props.theme || \"light\"\r\n  );\r\n  const isLoadingComplete = useCachedResources(props.images, props.fonts);\r\n  const isDarkmode = theme === \"dark\";\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, isDarkmode, setTheme }}>\r\n      <StatusBar\r\n        backgroundColor={component[theme].statusBar.color}\r\n        barStyle={isDarkmode ? \"light-content\" : \"dark-content\"}\r\n      />\r\n      <SafeAreaProvider\r\n        style={{\r\n          backgroundColor: isDarkmode ? themeColor.dark : themeColor.white100,\r\n        }}\r\n      >\r\n        {!isLoadingComplete\r\n          ? props.loading\r\n            ? props.loading\r\n            : null\r\n          : props.children}\r\n      </SafeAreaProvider>\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport { ThemeProvider, ThemeContext, useTheme, ContextProps };\r\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,SAASC,SAAT,EAAoBC,UAApB;AACA,OAAOC,kBAAP;;;AAUA,IAAMC,YAAY,GAAGL,KAAK,CAACM,aAAN,CAAkC;EACrDC,KAAK,EAAE,OAD8C;EAErDC,QAAQ,EAAE,kBAACD,KAAD;IAAA,OAAWE,OAAO,CAACC,IAAR,CAAa,mBAAb,CAAX;EAAA;AAF2C,CAAlC,CAArB;;AAKA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;EAAA,OAAMX,KAAK,CAACY,UAAN,CAAiBP,YAAjB,CAAN;AAAA,CAAjB;;AAEA,IAAMQ,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAOhB;EACJ,sBAA0Bd,KAAK,CAACe,QAAN,CACxBD,KAAK,CAACP,KAAN,IAAe,OADS,CAA1B;EAAA;EAAA,IAAOA,KAAP;EAAA,IAAcC,QAAd;;EAGA,IAAMQ,iBAAiB,GAAGZ,kBAAkB,CAACU,KAAK,CAACG,MAAP,EAAeH,KAAK,CAACI,KAArB,CAA5C;EACA,IAAMC,UAAU,GAAGZ,KAAK,KAAK,MAA7B;EAEA,OACE,MAAC,YAAD,CAAc,QAAd;IAAuB,KAAK,EAAE;MAAEA,KAAK,EAALA,KAAF;MAASY,UAAU,EAAVA,UAAT;MAAqBX,QAAQ,EAARA;IAArB,CAA9B;IAAA,WACE,KAAC,SAAD;MACE,eAAe,EAAEN,SAAS,CAACK,KAAD,CAAT,CAAiBa,SAAjB,CAA2BC,KAD9C;MAEE,QAAQ,EAAEF,UAAU,GAAG,eAAH,GAAqB;IAF3C,EADF,EAKE,KAAC,gBAAD;MACE,KAAK,EAAE;QACLG,eAAe,EAAEH,UAAU,GAAGhB,UAAU,CAACoB,IAAd,GAAqBpB,UAAU,CAACqB;MADtD,CADT;MAAA,UAKG,CAACR,iBAAD,GACGF,KAAK,CAACW,OAAN,GACEX,KAAK,CAACW,OADR,GAEE,IAHL,GAIGX,KAAK,CAACY;IATZ,EALF;EAAA,EADF;AAmBD,CAjCD;;AAmCA,SAASb,aAAT,EAAwBR,YAAxB,EAAsCM,QAAtC"},"metadata":{},"sourceType":"module"}